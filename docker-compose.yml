version: "3.4"
services:
  webapigateway:
    image: ${Docker_Registry}-webapigateway
    build:
      context: .
      dockerfile: src/ApiGateway/Web.ApiGateway/Dockerfile
    container_name: c_webapigateway
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${WebApiGateway_Port}
      - ServiceConfig__serviceName=webapigateway
    ports:
      - "${WebApiGateway_Port}:${WebApiGateway_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  adminidentityservice:
    image: ${Docker_Registry}-adminidentityservice
    build:
      context: .
      dockerfile: src/Services/AdminIdentityServices/AdminIdentityService/Dockerfile
    container_name: c_adminidentityservice
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${AdminIdentityService_Port}
      - ServiceConfig__serviceName=c_adminidentityservice
    ports:
      - "${AdminIdentityService_Port}:${AdminIdentityService_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    depends_on:
      - webapigateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  basketservice:
    image: ${Docker_Registry}-basketservice
    build:
      context: .
      dockerfile: src/Services/BasketServices/BasketService/BasketService.Api/Dockerfile
    container_name: c_basketservice
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${BasketService_Port}
      - ServiceConfig__serviceName=c_basketservice
    ports:
      - "${BasketService_Port}:${BasketService_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    depends_on:
      - webapigateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  catalogservice:
    image: ${Docker_Registry}-catalogservice
    build:
      context: .
      dockerfile: src/Services/CatalogServices/CatalogService/CatalogService.Api/Dockerfile
    container_name: c_catalogservice
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${CatalogService_Port}
      - ServiceConfig__serviceName=c_catalogservice
    ports:
      - "${CatalogService_Port}:${CatalogService_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    depends_on:
      - webapigateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  customerservice:
    image: ${Docker_Registry}-customerservice
    build:
      context: .
      dockerfile: src/Services/CustomerServices/CustomerService/CustomerService.Api/Dockerfile
    container_name: c_customerservice
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${CustomerService_Port}
      - ServiceConfig__serviceName=c_customerservice
    ports:
      - "${CustomerService_Port}:${CustomerService_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    depends_on:
      - webapigateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  notificationservice:
    image: ${Docker_Registry}-notificationservice
    build:
      context: .
      dockerfile: src/Services/NotificationServices/NotificationService/NotificationService.Api/Dockerfile
    container_name: c_notificationservice
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${NotificationService_Port}
      - ServiceConfig__serviceName=c_notificationservice
    ports:
      - "${NotificationService_Port}:${NotificationService_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    depends_on:
      - webapigateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  orderservice:
    image: ${Docker_Registry}-orderservice
    build:
      context: .
      dockerfile: src/Services/OrderServices/OrderService/OrderService.Api/Dockerfile
    container_name: c_orderservice
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${OrderService_Port}
      - ServiceConfig__serviceName=c_orderservice
    ports:
      - "${OrderService_Port}:${OrderService_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    depends_on:
      - webapigateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  paymentservice:
    image: ${Docker_Registry}-paymentservice
    build:
      context: .
      dockerfile: src/Services/PaymentServices/PaymentService/PaymentService.Api/Dockerfile
    container_name: c_paymentservice
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${PaymentService_Port}
      - ServiceConfig__serviceName=c_paymentservice
    ports:
      - "${PaymentService_Port}:${PaymentService_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    depends_on:
      - webapigateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  productservice:
    image: ${Docker_Registry}-productservice
    build:
      context: .
      dockerfile: src/Services/ProductServices/ProductService/ProductService.Api/Dockerfile
    container_name: c_productservice
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${ProductService_Port}
      - ServiceConfig__serviceName=c_productservice
    ports:
      - "${ProductService_Port}:${ProductService_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    depends_on:
      - webapigateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  searchbarservice:
    image: ${Docker_Registry}-searchbarservice
    build:
      context: .
      dockerfile: src/Services/SearchBarServices/SearchBarService/SearchBarService.Api/Dockerfile
    container_name: c_searchbarservice
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${SearchBarService_Port}
      - ServiceConfig__serviceName=c_searchbarservice
    ports:
      - "${SearchBarService_Port}:${SearchBarService_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    depends_on:
      - webapigateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
  shippingservice:
    image: ${Docker_Registry}-shippingservice
    build:
      context: .
      dockerfile: src/Services/ShippingServices/ShippingService/ShippingService.Api/Dockerfile
    container_name: c_shippingservice
    environment:
      - ASPNETCORE_ENVIRONMENT=${Stage}
      - ASPNETCORE_URLS=http://+:${ShippingService_Port}
      - ServiceConfig__serviceName=c_shippingservice
    ports:
      - "${ShippingService_Port}:${ShippingService_Port}"
    networks:
      - net_backendservices
    env_file:
      - ./.env
    depends_on:
      - webapigateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
networks:
  net_frontend:
    driver: bridge
    external: true
  net_backendservices:
    driver: bridge
    external: true
